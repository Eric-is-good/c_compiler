/* Generated By:JavaCC: Do not edit this line. LexConstants.java */
package com.javacc.lexer;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface LexConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int CONSTANT = 11;
  /** RegularExpression Id. */
  int MAIN = 12;
  /** RegularExpression Id. */
  int INT = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int IF = 15;
  /** RegularExpression Id. */
  int ELSE = 16;
  /** RegularExpression Id. */
  int VOID = 17;
  /** RegularExpression Id. */
  int DOUBLE = 18;
  /** RegularExpression Id. */
  int FLOAT = 19;
  /** RegularExpression Id. */
  int WHILE = 20;
  /** RegularExpression Id. */
  int DO = 21;
  /** RegularExpression Id. */
  int FOR = 22;
  /** RegularExpression Id. */
  int CHAR = 23;
  /** RegularExpression Id. */
  int STRING = 24;
  /** RegularExpression Id. */
  int BOOL = 25;
  /** RegularExpression Id. */
  int BREAK = 26;
  /** RegularExpression Id. */
  int SWITCH = 27;
  /** RegularExpression Id. */
  int CASE = 28;
  /** RegularExpression Id. */
  int DEFAULTS = 29;
  /** RegularExpression Id. */
  int PLUS = 30;
  /** RegularExpression Id. */
  int MINUS = 31;
  /** RegularExpression Id. */
  int MULTIPLY = 32;
  /** RegularExpression Id. */
  int DIVIDE = 33;
  /** RegularExpression Id. */
  int GD = 34;
  /** RegularExpression Id. */
  int LD = 35;
  /** RegularExpression Id. */
  int SQRT = 36;
  /** RegularExpression Id. */
  int EQ = 37;
  /** RegularExpression Id. */
  int GE = 38;
  /** RegularExpression Id. */
  int LE = 39;
  /** RegularExpression Id. */
  int EQQ = 40;
  /** RegularExpression Id. */
  int NE = 41;
  /** RegularExpression Id. */
  int OR = 42;
  /** RegularExpression Id. */
  int AND = 43;
  /** RegularExpression Id. */
  int COMMA = 44;
  /** RegularExpression Id. */
  int SEMICOLON = 45;
  /** RegularExpression Id. */
  int LB = 46;
  /** RegularExpression Id. */
  int RB = 47;
  /** RegularExpression Id. */
  int BLB = 48;
  /** RegularExpression Id. */
  int BRB = 49;
  /** RegularExpression Id. */
  int LBB = 50;
  /** RegularExpression Id. */
  int RBB = 51;
  /** RegularExpression Id. */
  int COLON = 52;
  /** RegularExpression Id. */
  int IDENTIFIER = 53;
  /** RegularExpression Id. */
  int LETTER = 54;
  /** RegularExpression Id. */
  int DIGIT = 55;
  /** RegularExpression Id. */
  int INCLUDE_FILE = 56;
  /** RegularExpression Id. */
  int STRING_LITERAL = 57;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<CONSTANT>",
    "\"main\"",
    "\"int\"",
    "\"return\"",
    "\"if\"",
    "\"else\"",
    "\"void\"",
    "\"double\"",
    "\"float\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"char\"",
    "\"string\"",
    "\"bool\"",
    "\"break\"",
    "\"switch\"",
    "\"case\"",
    "\"default\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\">\"",
    "\"<\"",
    "\"^\"",
    "\"=\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\",\"",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<INCLUDE_FILE>",
    "<STRING_LITERAL>",
  };

}
